/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

// Adjacent numbers are defined as numbers where the delta between them does not
// exceed 1. E.g. 7, 8, 8, 7, 8

const massiveInput = ``

const testInput = '370484403199890008895243450658541227588666881164271'

const getMaxProduct = (series: string, slice: number) => {
    let currentMax = -Infinity;

    for (let i = 0; i < series.length; i++) {
        const currentSlice = series.slice(i, i + slice).split('');
        console.log(currentSlice)
        const product = currentSlice.map((num: string) => parseInt(num)).reduce((agg: any, curr: any) => agg * curr, 1);

        if (product > currentMax) currentMax = product;
    }

    return currentMax;
}

console.log(getMaxProduct(massiveInput, 13))

/*
yeah I was doing something else entirely smh, in my mind I was defining adjacent digits as numbers
that have a delta of 1 or less, so 9989


const isAdjacentNumber = (number1: number, number2: number) => {
    return Math.abs(number1 -  number2) <= 1;
}

const testInput = '799888099776';


const getSequences = (series: number | string, seqLength = 2) => {
    const allSequences = [];
    const stringifiedSeries = series.toString();

    let leftPointer = 0;
    let rightPointer = leftPointer + 1;

    for (let i = 0; i < stringifiedSeries.length; i++) {
        // console.log(stringifiedSeries[i])
        const localSequence = [stringifiedSeries[leftPointer]];

        while (isAdjacentNumber(parseInt(stringifiedSeries[leftPointer]), parseInt(stringifiedSeries[rightPointer]))) {
            localSequence.push(stringifiedSeries[rightPointer]);
            leftPointer++;
            rightPointer = leftPointer + 1;
        }

        leftPointer = i;
        rightPointer = leftPointer + 1;

        if (localSequence.length > 1) allSequences.push(localSequence);
    }

    console.log(allSequences)

    const validSequences = allSequences.filter((localArr) => localArr.length === seqLength)

    console.log(validSequences)
}

getSequences(massiveInput, 10)
*/
/*
[9, 9, 8, 8, 8]
[9, 8, 8, 8]
[8, 8, 8]
[8, 8]
[9, 9]
*/
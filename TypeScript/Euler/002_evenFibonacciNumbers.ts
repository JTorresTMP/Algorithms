/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
*/

// Keep a running sum
const sumLastTwoElements = (numArr: number[]):number => {
    return numArr[numArr.length - 2] + numArr[numArr.length - 1];
}

const isEven = (n: number) => n % 2 === 0;

const getFibonacciSequence = (n: number) => {
    let sequence: number[] = [];

    for (let i = 0; i < n; i++) {
        if (i === 0 && n === 1) {
            sequence.push(1);
            i++;
        } else if (i === 0) {
            sequence.push(1, 2);
            i++;
        }
        else {
            const localSum = sumLastTwoElements(sequence);
            sequence.push(localSum);
        }
    }

    return sequence;
}

getFibonacciSequence(5)

const entireSolution = (limit: number) => {
    let sequence: number[] = [1, 2];
    let runningSum: number = 2;

    while (sequence[sequence.length - 1] < limit) {
        const nextNumber: number = sumLastTwoElements(sequence);
        sequence.push(nextNumber)
        if (isEven(nextNumber)) runningSum += nextNumber;
    }

    // console.log(sequence)
    return runningSum;
}

console.log(entireSolution(4000000))